#!/bin/sh

# fail on any error
set -e

NOW=$(date +%s)

CACHES="/tmp/pdf2pdfa /tmp/pdf2png"
LOGFILE=$HOME/clean-caches.log

NREMOVED=0
BREMOVED=0

# load limits from laundry later
MAXFILEACCESS=172800
MAXCACHEMB=256

log() {
   echo "$(date +"%Y.%m.%d %H:%M:%S"): $@" | tee -a $LOGFILE
}

remove_file() {
   NREMOVED=$(expr $NREMOVED + 1)
   BREMOVED=$(expr $BREMOVED + $(stat -c "%s" "$1"))
   rm "$1"
}

flush_line() {
   local LASTACCESS=$1
   shift
   local FILE="$@"
   test -f "$FILE" || return
   local ELAPSED=$(expr "$NOW" - "$LASTACCESS")
   test "$ELAPSED" -gt "$MAXFILEACCESS" && remove_file "$FILE" || true
}

# todo operation: fold over entries in acces time order, and start removing when cache is full or last access time limit is hit

flush_cache() {
   test -d "$1" || { log "warning: $1 does not exist"; return; }
   log flushing $1
   stat -c '%X %n' "$1"/* | while read LINE; do flush_line $LINE;done
}

check_natnum() {
   echo $2 | grep -q "^[0-9][0-9]*$" && return
   echo "Argument of $1 should be a natural number, but was '$2'"
   exit 1
}

show_help() {
   echo "Usage: clean-caches [arg].. [cache-dir] ...
args:
 -h | --help: show this help
 -t | --max-access-time [$MAXFILEACCESS]:
    maximum number of seconds since last file access
    after which the file is considered to be removable
 -s | --max-cache-size [$MAXCACHEMB]:
    maximum size of each cache directory in megabytes
    oldest files are removed once this limit is hit"
echo "Default cache-dirs are: $CACHES"
}

parse_args() {
   if [ 0 = $# ]
   then
      return
   fi
   ARG=$1
   echo "ARG $ARG"
   case "$ARG" in
     (-t|--max-access-time)
        MAXFILEACCESS=$2
        check_natnum "$1" "$MAXFILEACCESS"
        shift 2
        parse_args $@
        ;;
     (-s|--max-cache-size)
        MAXCACHEMB=$2
        check_natnum "$1" "$MAXCACHESIZE"
        shift 2
        parse_args $@
        ;;
     (-h|--help)
        echo BOOM
        show_help
        exit 0
        ;;
     (*)
        echo LOL
        CACHES="$@"
        ;;
   esac
}

parse_args $@

log "cleaning $CACHES, access limit $MAXFILEACCESS"

for CACHE in $CACHES
do
   flush_cache $CACHE 
done

log "all done. $BREMOVED bytes / $NREMOVED files removed"

