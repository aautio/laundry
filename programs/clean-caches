#!/bin/sh

# fail on any error
set -e

NOW=$(date +%s)

CACHES="/tmp/pdf2pdfa /tmp/pdf2png"
LOGFILE=$HOME/clean-caches.log

NREMOVED=0
BREMOVED=0

MAXFILEACCESS=172800
MAXCACHEMB=256

set_max_cache_mb() {
   MAXCACHEMB=$1
   MAXCACHEBYTES=$(expr 1048576 "*" $MAXCACHEMB)
}

log() {
   echo "$(date +"%Y.%m.%d %H:%M:%S"): $@" | tee -a $LOGFILE
}

remove_file() {
   test -f "$1" || return
   rm "$1"
}

flush_line() {
   local LASTACCESS=$1
   shift
   local FILESIZE=$1
   shift
   local FILE="$@"
   test -f "$FILE" || return
   local ELAPSED=$(expr "$NOW" - "$LASTACCESS")
   test "$ELAPSED" -lt "$MAXFILEACCESS" || remove_file "$FILE"
   test "$FILESIZE" -lt "$MAXCACHEBYTES" || remove_file "$FILE"
}

flush_cache() {
   test -d "$1" || { log "warning: $1 does not exist"; return; }
   log flushing $1
   stat -c '%X %s %n' "$1"/* | sort -r | while read LINE; do flush_line $LINE; done
}

check_natnum() {
   echo $2 | grep -q "^[0-9][0-9]*$" && return
   echo "Argument of $1 should be a natural number, but was '$2'"
   exit 1
}

show_help() {
   echo "Usage: clean-caches [arg].. [cache-dir] ...
args:
 -h | --help: show this help
 -t | --max-access-time [$MAXFILEACCESS]:
    maximum number of seconds since last file access
    after which the file is considered to be removable
 -s | --max-cache-size [$MAXCACHEMB]:
    maximum size of each cache directory in megabytes
    oldest files are removed once this limit is hit"
echo "Default cache-dirs are: $CACHES"
}

parse_args() {
   if [ 0 = $# ]
   then
      return
   fi
   ARG=$1
   case "$ARG" in
     (-t|--max-access-time)
        MAXFILEACCESS=$2
        check_natnum "$1" "$MAXFILEACCESS"
        shift 2
        parse_args $@
        ;;
     (-s|--max-cache-size)
        MAXCACHEMB=$2
        check_natnum "$1" "$MAXCACHEMB"
        shift 2
        parse_args $@
        ;;
     (-h|--help)
        echo BOOM
        show_help
        exit 0
        ;;
     (*)
        CACHES="$@"
        ;;
   esac
}

parse_args $@

set_max_cache_mb $MAXCACHEMB

log "cleaning $CACHES, access limit ${MAXFILEACCESS}s, size limit ${MAXCACHEMB}MB"

for CACHE in $CACHES
do
   INITIAL=$(du -bh "$CACHE" | sed -e 's/[ \t].*//')
   flush_cache $CACHE 
   CLEAN=$(du -bh "$CACHE" | sed -e 's/[ \t].*//')
   log "$CACHE $INITIAL -> $CLEAN"
done

log "all done"

